
                                         Arrays problems


1. Set Matrix Zeroes
    Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's?
    
Ans: 

class Solution {
    public void setZeroes(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int[] row = new int[n];
        int[] col = new int[m];
        Arrays.fill(row,-1);
        Arrays.fill(col,-1);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j] == 0){
                    row[i] = 0;
                    col[j] = 0;
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(row[i]==0 || col[j]==0){
                    matrix[i][j]=0;
                }
            }
        }
        
    }
}

2. next permutaion of arrays

Ans: Simple Algo
a) come from behind
b) find the non increasing elemnt i
c) go from behind again and find the elemnt the first elemnt k bigger than i
d) swap them
e) then sort the lements after index i and join it ot original array


var nextPermutation = function(nums) {

  // first find the unique element
  let elmntIdx=0,i;
  for(i=nums.length-2;i>=0;i--){
      if(nums[i]<nums[i+1]){
          elmntIdx=i;
          break;
      }
  }
  if(i<0){
      nums.reverse();
  }else{
  let swapIdx=0;
  //find the first biggest of unique element from right
  for(let j=nums.length-1;j>=0;j--){
      if(nums[j]>nums[elmntIdx]){
            swapIdx=j;
            break;
      }
 }
 
 
 2) The sorting  of 0, 1, 2 in an array without sort?
Ans) Simple use low, mid and high. Traverse with mid 
 i) while(mid<=high)
 ii) if mid === 0 increment both mid and low and swap
 iii) if mid === 1 increment only mid
 iv) if mid === 2 decrease high and swap

function swap(arr,low,mid){
   let el=arr[mid];
   arr[mid]=arr[low];
   arr[low]=el;
} 
var sortColors = function(nums) {
    let lo=mid=0,hi=nums.length-1;

    while(mid<=hi){
        if(nums[mid]===0){
           swap(nums,lo,mid);
           mid+=1;
           lo+=1;
        }
        else if(nums[mid]===1){
            mid+=1;
        }
        else{
            swap(nums,mid,hi);
            hi-=1;
        }
    }  

};

3) Rotate a matrix?
 Link :- https://leetcode.com/problems/rotate-array/?envType=study-plan-v2&envId=top-interview-150
Ans ) 
Technique 1 : my way take first elements from first of every row and form them into a new row you have rotated it

 or 
 
Technique 2 :  take transpose of a matrix and then rotate the rows

var rotate = function(matrix) {
    let n=matrix.length;
    
    // Transposing the matrix
    for(let i=0;i<n;i++){
      for(let j=0;j<i;j++){
        let el=matrix[i][j];
        matrix[i][j]=matrix[j][i];
        matrix[j][i]=el;
      }
    }
    
    // Reversing each row of the matrix
    for(let i=0;i<n;i++){
      matrix[i].reverse();
    }

};


4) Reverse an array by K lements

Sol) 1) First reverse 
     2) build helper function to reverse subarrays
     
     Code : 
     ```
     const RvrsN=(nums,start,end)=>{
    while(start<end){
      [nums[start],nums[end]] = [nums[end],nums[start]];
      start++;
      end--;
    }
} 
var rotate = function(nums, k) {
    k = k % nums.length;
    nums.reverse();
    RvrsN(nums,0,k-1);
    RvrsN(nums,k,nums.length-1);
};
```
5)  Best Time to Buy and Sell Stock II
   link : - https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/?envType=study-plan-v2&envId=top-interview-150
   
sol: 1) The technique is to find the local minima of every sub array and keep calculating the profit
     2) The entire profit adds up to one value no matter the incresing order be
     3) whenever there is difference add it to profit and set the next value

code :-
    var maxProfit = function(prices) {
        let profit = 0;
        let minprice = Infinity;
        for(let i=0;i<prices.length;i++){
            minprice = Math.min(minprice,prices[i]);
            if(prices[i] - minprice>0){
                profit += prices[i] - minprice;
                minprice = prices[i];
            }
        }
        console.log(profit);
        return profit;
    }; 
           
6) Jump Game 1: - https://leetcode.com/problems/jump-game/?envType=study-plan-v2&envId=top-interview-150
   Jump Game 2 : - https://leetcode.com/problems/jump-game/?envType=study-plan-v2&envId=top-interview-150

7) H - index
https://leetcode.com/problems/h-index/description/?envType=study-plan-v2&envId=top-interview-150

Sol:- YOU can find the biggest smallest reoccuring number just by
     1) sorting the array in reverse oorder
     2) and traversing till the values in it are greater than the index 
