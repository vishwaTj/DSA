                                                   Intervals 


1)** Merge intervals -- https://leetcode.com/problems/merge-intervals/description/
sol: 1) simple just sort the interval array
        with first index of subarray
     2) start with i=1 and comapre values with previous values
     3) if theres need a change update and modify 
     4) also splice the original index
     5) do an i-- to roll back and start from that index only to
        check higher ones also woth the current ones

code: - 
var merge = function(intervals) {
    intervals.sort((a,b)=>a[0]-b[0]);
    for(let i=1;i<intervals.length;i++){
        let [x,y] = intervals[i];
        let [prevX,prevY] = intervals[i-1];

        if(x<= prevY){
            intervals[i-1][1] = Math.max(y,prevY);
            intervals.splice(i,1);
            i--;
        }
    }
    return intervals;
};

    

2)** Insert Interval -- https://leetcode.com/problems/insert-interval/description/?envType=study-plan-v2&envId=top-interview-150
sol)
1) create a left and right array
2) if the end of current subarray is less than start of insertion interval push it to left
3) if the start of current subarray is more than end of insertion interval push it to right array
4) else do s = Math.min(start, newStart) and e = Math.max(end , newEnd);
5) after this club all the arrays [...left, [s,e], ...right] ---> this will give new interval array

code:- 
var insert = function(intervals, newInterval) {
 
    let [newStart, newEnd] = newInterval, left = [], right = [];
    for(let int of intervals) {
        let [start, end] = int;
        if(end < newStart) left.push(int);
        else if(start > newEnd) right.push(int);
        else{
            newStart = Math.min(start, newStart);
            newEnd = Math.max(end, newEnd);
        }
    }
    return [...left, [newStart, newEnd], ...right];
};








