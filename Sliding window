                       SLIDING WINDOW problems

1) Minimum Size Subarray Sum --- https://leetcode.com/problems/minimum-size-subarray-sum/description/?envType=study-plan-v2&envId=top-interview-150

sol:- 
 take pointers both from start (strt,end)
 while sum<target keep increasing the end pointer
 if sum>=target calculate min and keep increasing the strt pointer
 if length is equal to subarray length return 0
 else return min
 
 code: - 
 var minSubArrayLen = function(target, nums) {
    let min=nums.length+1,sum=0,i=0;
    let strt=0,end=0;
    while(strt<=end &&  end<nums.length){
        if(sum<target){
           sum+=nums[end];
           end++;
        }
        while(sum>=target && end>=strt){
           min = Math.min(end - strt, min);
           sum-=nums[strt];
           strt++;
        }
    }
    if(min === nums.length+1){
       min=0;
    }
   
   return min;
};

2) Substring with Concatenation of All Words  ---  https://leetcode.com/problems/substring-with-concatenation-of-all-words/description/?envType=study-plan-v2&envId=top-interview-150
sol:- 
1) calculate the window
2) create a map and register frequency
3) create a for loop for the entire window till the window can go
4) iterate and createa function and split the sub string from window into a map2
5) comapre all values of map and map2 and return true;

code: - 
var findSubstring = function(s, words) {
    let res=[];

    let n = words.length;
    let m = words[0].length;
    let len = m*n;  //Length of sliding window
 
    let map={};

    for(let w of words) map[w] = map[w]+1 || 1; //Hash word freq

    for(let i=0;i<s.length - len + 1 ; i++){
        let sub = s.slice(i,i+len);  //Generate substring of sliding window length

        if(isConcat(map,sub,m)) res.push(i);
    }  

    return res;
};

var isConcat=(map,sub,m)=>{
   let seen={};

   for(let i=0;i<sub.length;i+=m){
       let substr = sub.slice(i,i+m);  
       seen[substr] = seen[substr] + 1 || 1;
   }

   for(let key in map){
       if(map[key] !== seen[key]) return false //Word freq must match between map and seen
   }

   return true;
}
 
3) longest unique substring -- https://leetcode.com/problems/longest-substring-without-repeating-characters/description/?envType=study-plan-v2&envId=top-interview-150


