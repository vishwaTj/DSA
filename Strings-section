
                          Algos ecountered in String
1) Machener Change algorithm
2) Rabin Karp algorithm to find sub strings



  Strings are immutable in js meaning you cannot modified a character of string based on its index in square brackets

let str ="Hello";
str[0]="Y" ----> this is wrong and it wont work
str.toUpperCase() ---> will not alter the original string and only
                       return a new object which has to beassigned to a new value



            Questions

1. Given an input string s, reverse the order of the words.
   A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
   Return a string of the words in reverse order concatenated by a single space.

just read the solution easy
'''
class Solution {
    public String reverseWords(String s) {
      // TMKOC Bhai
     int left=0;
     int right=s.length()-1;
  
    String temp="";
    String ans="";

    while(left<=right){
      if(s.charAt(left)==' '){
        if(!ans.equals("")){
          if(temp.equals("")){
              left++;
              continue;
           }
          ans= temp+" "+ans;
        }else{
          ans=temp;
        }
        temp="";
      }else{
        temp+=s.charAt(left);
      }
      left++;
    }

    if(!temp.equals("")){
      if(!ans.equals("")){
          ans= temp+" "+ans;
        }else{
          ans=temp;
        }
    }
    return ans;
}
}
'''



2.Longest Palindromic Substring
sol:- generally a string has 2n-1 center's so in this method we take each center and expand arround it to find longest 
      Palindromic string. As shown below.
      
      class Solution {
    public int palindrome_checker(String s, int Left, int Right){
        int L=Left,R=Right;
        while(L>=0 && R<s.length() && s.charAt(L)==s.charAt(R)){
            L--;
            R++;
        }
        return R-L-1;
    }
    public String longestPalindrome(String s) {
        int start=0,end=0;
        for(int i=0;i<s.length();i++){
            int len1 = palindrome_checker(s,i,i);
            int len2 = palindrome_checker(s,i,i+1);
            int len = Math.max(len1,len2);
            if(len>end-start){
                start = i - (len-1)/2;
                end = i + len/2;
            }
        }
        return s.substring(start,end+1);
    }
}


Time complexity == O(n2)
Space Complexity == O(1)

Machener change





3. Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
   The algorithm for myAtoi(string s) is as follows:
   
Ans: 
public int myAtoi(String s) {
        if(s.length()==0){
            return 0;
        }
        char str[]= s.toCharArray();
        int i=0,base=0,sign=1;
        while(i<str.length && str[i]==' '){
            System.out.print(str[i]);
            i++;
        }
        if(i==str.length){
            return 0;
        }
        if(str[i]== '-' || str[i]=='+'){
            if(str[i]=='-'){
                sign=-1;
            }else{
                sign=1;
            }
            i++;
        }
        while( i<str.length && str[i]>='0' && str[i]<='9'){
            System.out.print(str[i]);
            if((base>Integer.MAX_VALUE/10) || (base==Integer.MAX_VALUE/10)
                  && str[i]-'0' > 7){
                if(sign ==1){
                    return Integer.MAX_VALUE;
                }else{
                    return Integer.MIN_VALUE;
                }
             }
             base = base*10 + (str[i++]-'0');
        }
        return base*sign;
    }   


4. Repeated String Match
Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.
 Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".

Ans: Rabin Karp - algorithm is used
class Solution {
    public int Rabin_Karp(String source,String target){
      System.out.println(target);
      int base=1000000;
      int power = 1;
      int m=target.length();
      for(int i=0;i<m;i++){
          power = (power*13)%base;
      }
      int targetHash=0;
     for(int i=0;i<m;i++){
        targetHash = (targetHash*13+target.charAt(i))%base;
     }
     int sourceHash=0;
     for(int i=0;i<source.length();i++){
         sourceHash = (sourceHash*13 + source.charAt(i))%base;
         if(i<m-1) continue;
         if(i>=m){
             sourceHash = (sourceHash - source.charAt(i-m)*power)%base;
         }
         if(sourceHash<0)
            sourceHash+=base;
         if(sourceHash==targetHash){
             System.out.println(i+" "+m+" "+source.substring(i-m+1,(i-m+1)+m)+" "+target);
             return i-m+1;
         }    
     }
      return -1;
    }
    public int repeatedStringMatch(String a, String b) {
      if(a.length()<=0 || b.length()<=0)
        return -1; 
      
      if((a.length() == b.length()) && a.equals(b)){
          return 1;
      }
      String target="";
      int count=0;
      while(target.length()<b.length()){
          target+=a;
          count+=1;
      }
      if(target.equals(b)){ return count;}
      if(Rabin_Karp(target,b)!=-1) return count;
      if(Rabin_Karp(target+a,b)!=-1) return count+1;

      return -1;
      
    }
}


5. Count and Say   ( https://leetcode.com/problems/count-and-say/description/ )
    The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
    countAndSay(1) = "1"
    countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string ?
    
Ans: 
class Solution {
    public String countAndSay(int n) {
        String S="1";
        for(int i=0;i<n-1;i++){
          int count=1;
          char c=S.charAt(0);
          StringBuilder sb = new StringBuilder();
          for(int j=1;j<S.length();j++){
            if(c!=S.charAt(j)){
              sb.append(count);
              sb.append(c);
              count=0;
              c=S.charAt(j);
            }
            count++;
          }
          sb.append(count);
          sb.append(c);
          S=sb.toString();
        }
        return S;
    }
}

6. Longest Substring with At Least K Repeating Characters --- https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/description/
sol:-
code:-
var longestSubstring = function(s, k) {
    let n = s.length;
    if(n == 0 || n < k)
        return 0;
    if(k == 1)
        return n;
    
    const freq = {};  // object to store the freq of each character ex . { 'a' : 2 , 'b' : 1 ...}
    
	// counting the freq. of each character
    for(let i=0;i<n;i++)  
    {
        let char = s[i];
        if(freq[char])    // if the character is already present , increase it's freq.
            freq[char]++;
        else
            freq[char] = 1; // else assign the freq. as 1
    }
    let i = 0;
    while(i < n && freq[s[i]] >= k)  // while loop continue till the freq. of character is greater than or equal to k
        i++;
    
    if(i >= n-1) // if i == string.length
        return i;
    
    let left1 = longestSubstring(s.substring(0,i),k);  // dividing the string at index where freq. of character is less than k and calling the func again on the substring
    
    while(i < n && freq[s[i]] < k) // ignore the char whose freq. is less than k
        i++;
    
    let right1 = longestSubstring(s.substring(i),k); // second part of the string
    
    return Math.max(left1,right1);
};

