1. Given an input string s, reverse the order of the words.
   A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
   Return a string of the words in reverse order concatenated by a single space.

just read the solution easy
'''
class Solution {
    public String reverseWords(String s) {
      // TMKOC Bhai
     int left=0;
     int right=s.length()-1;
  
    String temp="";
    String ans="";

    while(left<=right){
      if(s.charAt(left)==' '){
        if(!ans.equals("")){
          if(temp.equals("")){
              left++;
              continue;
           }
          ans= temp+" "+ans;
        }else{
          ans=temp;
        }
        temp="";
      }else{
        temp+=s.charAt(left);
      }
      left++;
    }

    if(!temp.equals("")){
      if(!ans.equals("")){
          ans= temp+" "+ans;
        }else{
          ans=temp;
        }
    }
    return ans;
}
}
'''



2.Longest Palindromic Substring
sol:- generally a string has 2n-1 center's so in this method we take each center and expand arround it to find longest 
      Palindromic string. As shown below.
      
      class Solution {
    public int palindrome_checker(String s, int Left, int Right){
        int L=Left,R=Right;
        while(L>=0 && R<s.length() && s.charAt(L)==s.charAt(R)){
            L--;
            R++;
        }
        return R-L-1;
    }
    public String longestPalindrome(String s) {
        int start=0,end=0;
        for(int i=0;i<s.length();i++){
            int len1 = palindrome_checker(s,i,i);
            int len2 = palindrome_checker(s,i,i+1);
            int len = Math.max(len1,len2);
            if(len>end-start){
                start = i - (len-1)/2;
                end = i + len/2;
            }
        }
        return s.substring(start,end+1);
    }
}


Time complexity == O(n2)
Space Complexity == O(1)

Machener change





3. Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
   The algorithm for myAtoi(string s) is as follows:
   
Ans: 
public int myAtoi(String s) {
        if(s.length()==0){
            return 0;
        }
        char str[]= s.toCharArray();
        int i=0,base=0,sign=1;
        while(i<str.length && str[i]==' '){
            System.out.print(str[i]);
            i++;
        }
        if(i==str.length){
            return 0;
        }
        if(str[i]== '-' || str[i]=='+'){
            if(str[i]=='-'){
                sign=-1;
            }else{
                sign=1;
            }
            i++;
        }
        while( i<str.length && str[i]>='0' && str[i]<='9'){
            System.out.print(str[i]);
            if((base>Integer.MAX_VALUE/10) || (base==Integer.MAX_VALUE/10)
                  && str[i]-'0' > 7){
                if(sign ==1){
                    return Integer.MAX_VALUE;
                }else{
                    return Integer.MIN_VALUE;
                }
             }
             base = base*10 + (str[i++]-'0');
        }
        return base*sign;
    }   


