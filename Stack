                                             Stack data structure problems


1. Simplify Path -- https://leetcode.com/problems/simplify-path/description/?envType=study-plan-v2&envId=top-interview-150
sol:- simple and easy
 1) split it into an array based on '/' as delimeter
 2) Remove all empty spaces
 3) declare answer array to store
 4) Traverse through the split array 
            a) do nothing for '.'
            b) pop out value for '..' from answer
            c) push elements to answer
 5) push '/' at the fron and join the answer using '/' as delimeter

coode:- 
var simplifyPath = function(path) {
    //split string into array based on slash
    let s = path.split('/');

    // filter out all the empty spaces
    s = s.filter((el) => el!=='');
    
    // create a result array
    let result = [];

    for(let el of s){
        if(el === '.'){
            //do nothing
        }else if (el === '..'){
            result.pop(); // going a directory back so pop it
        }else{
            result.push(el);
        }
    }
    return '/' + result.join('/');
};


2. postfix evalutaion -- https://leetcode.com/problems/evaluate-reverse-polish-notation/description/?envType=study-plan-v2&envId=top-interview-150
sol:- simple and easy
1) just detect an operand do pop twice and perform the operation
2) push back the result to the same stack
3) if not an opearnad just parse it and push it to stack

code: -
var evalRPN = function(tokens) {
    const stack = [];

    for(let i=0;i<tokens.length;i++){
      if(tokens[i] === '+'){
        stack.push(stack.pop() + stack.pop());
      }else if( tokens[i] === '-'){
        stack.push(- stack.pop() + stack.pop());
      }else if( tokens[i] === '*'){
        stack.push(stack.pop() * stack.pop());
      }else if(tokens[i] === '/'){
        stack.push(Math.trunc(1/(stack.pop()/stack.pop())));
      }else{
        stack.push(parseInt(tokens[i]));
      }
    }
    return stack[0];
};


3. Basci calculator -- https://leetcode.com/problems/basic-calculator/description/?envType=study-plan-v2&envId=top-interview-150
sol:- read again

code: - 
var calculate = function(s) {
    let res = 0, sum = 0, sign = 1;
    let myStack = [];
    myStack.push(1);
    const isDigit = (ch) => {
        return ch >= '0' && ch <= '9';
    }
    for(let ch of s){
        if(isDigit(ch)) sum = sum * 10 + (ch - '0');
        else{
            res += sum * sign * myStack[myStack.length - 1];
            sum = 0;
            if(ch === '-') sign = -1;
            else if(ch === '+') sign = 1;
            else if ( ch === '(') {myStack.push(myStack[myStack.length - 1] * sign); sign = 1;}
            else if (ch === ')') myStack.pop();
        }
    }
    return res += (sign * sum);
};
